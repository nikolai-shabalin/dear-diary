---
// Компонент списка выполненных задач
---

<section class="completed-section">
    <h2 class="completed-section__title">
        Выполненные задачи
        <span id="completedCount" class="completed-section__count">(0)</span>
    </h2>
    <div id="completedTasks" class="completed-section__list">
        <!-- Выполненные задачи будут добавляться динамически -->
    </div>
</section>

<script>
    // Логика списка выполненных задач
    class CompletedTasks {
        private container: HTMLElement;
        private countElement: HTMLElement;

        constructor() {
            this.container = document.getElementById('completedTasks') as HTMLElement;
            this.countElement = document.getElementById('completedCount') as HTMLElement;
        }

        // Метод для рендеринга выполненных задач
        public renderCompletedTasks(tasks: any[]): void {
            if (!this.container || !this.countElement) return;

            const completedTasks = tasks.filter(t => t.isCompleted);
            this.countElement.textContent = `(${completedTasks.length})`;

            this.container.innerHTML = '';

            if (completedTasks.length === 0) {
                this.container.innerHTML = '<p class="completed-section__no-tasks">Нет выполненных задач</p>';
                return;
            }

            // Группируем задачи по месяцам и рендерим
            const groupedTasks = this.groupTasksByMonth(completedTasks);
            this.renderGroupedTasks(groupedTasks);
        }

        // Метод для группировки задач по месяцам
        private groupTasksByMonth(tasks: any[]): Map<string, any[]> {
            const grouped = new Map<string, any[]>();

            tasks.forEach(task => {
                // Используем completedAt, если есть, иначе createdAt
                const date = task.completedAt ? new Date(task.completedAt) : new Date(task.createdAt);
                const monthKey = this.formatMonthKey(date);

                if (!grouped.has(monthKey)) {
                    grouped.set(monthKey, []);
                }
                grouped.get(monthKey)!.push(task);
            });

            // Сортируем по дате (новые месяцы сверху)
            const sortedGrouped = new Map(
                Array.from(grouped.entries()).sort(([a], [b]) => b.localeCompare(a))
            );

            return sortedGrouped;
        }

        // Метод для рендеринга сгруппированных задач
        private renderGroupedTasks(groupedTasks: Map<string, any[]>): void {
            groupedTasks.forEach((tasks, monthKey) => {
                // Создаем заголовок месяца
                const monthHeader = this.createMonthHeader(monthKey, tasks.length);
                this.container.appendChild(monthHeader);

                // Создаем контейнер для задач месяца
                const monthTasksContainer = document.createElement('div');
                monthTasksContainer.className = 'month-tasks-container';

                // Добавляем задачи месяца
                tasks.forEach(task => {
                    const taskElement = this.createCompletedTaskElement(task);
                    monthTasksContainer.appendChild(taskElement);
                });

                this.container.appendChild(monthTasksContainer);
            });
        }

        // Метод для создания заголовка месяца
        private createMonthHeader(monthKey: string, taskCount: number): HTMLElement {
            const header = document.createElement('h3');
            header.className = 'month-header';
            header.textContent = `${this.formatMonthName(monthKey)} (${taskCount})`;
            return header;
        }

        // Метод для форматирования ключа месяца
        private formatMonthKey(date: Date): string {
            return `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;
        }

        // Метод для форматирования названия месяца
        private formatMonthName(monthKey: string): string {
            const [year, month] = monthKey.split('-');
            const date = new Date(parseInt(year), parseInt(month) - 1, 1);
            return date.toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: 'long'
            });
        }

        // Метод для добавления завершенной задачи в DOM
        public addCompletedTask(task: any): void {
            if (!this.container || !this.countElement) return;

            // Поскольку мы теперь группируем задачи по месяцам,
            // лучше перерендерить весь список для корректной группировки
            // Это будет вызвано из TaskManager с полным списком задач
            this.updateCount();
        }

        // Метод для удаления завершенной задачи из DOM
        public removeCompletedTask(taskId: string): void {
            if (!this.container || !this.countElement) return;

            // Поскольку мы теперь группируем задачи по месяцам,
            // лучше перерендерить весь список для корректной группировки
            // Это будет вызвано из TaskManager с полным списком задач
            this.updateCount();
        }

        // Метод для обновления счетчика завершенных задач
        private updateCount(): void {
            const taskCount = this.container.querySelectorAll('.task-item').length;
            this.countElement.textContent = `(${taskCount})`;
        }

        private createCompletedTaskElement(task: any): HTMLElement {
            const taskDiv = document.createElement('div');
            taskDiv.className = 'task-item task-item--completed';
            taskDiv.dataset.taskId = task.id;

            taskDiv.innerHTML = `
                <div class="task-item__content">
                    <span class="task-item__checkbox task-item__checkbox--completed">
                        <span class="task-item__checkmark">✓</span>
                    </span>
                    <span class="task-item__text">${this.escapeHtml(task.text)}</span>
                    <button type="button" class="task-item__delete-btn" title="Удалить задачу"></button>
                </div>
            `;

            // Обработчик удаления задачи
            const deleteBtn = taskDiv.querySelector('.task-item__delete-btn') as HTMLButtonElement;
            deleteBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                const deleteEvent = new CustomEvent('deleteTask', {
                    detail: { taskId: task.id }
                });
                document.dispatchEvent(deleteEvent);
            });

            return taskDiv;
        }

        private escapeHtml(text: string): string {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

    }

    // Инициализация списка выполненных задач при загрузке DOM
    document.addEventListener('DOMContentLoaded', () => {
        const completedTasksInstance = new CompletedTasks();
        // Сохраняем экземпляр в глобальной области для доступа из TaskManager
        (window as any).completedTasksInstance = completedTasksInstance;
    });
</script>

<style is:global>
    /* Mobile First - Секция выполненных задач */
    .completed-section {
        padding: 1rem;
    }

    .completed-section__title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1rem;
        color: var(--text-primary);
        display: flex;
        align-items: center;
        gap: 0.5rem;
        line-height: 1.3;
    }

    .completed-section__count {
        background: var(--accent-color);
        color: white;
        padding: 0.25rem 0.5rem;
        border-radius: var(--radius-sm);
        font-size: 0.875rem;
        font-weight: 500;
    }

    .completed-section__list {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .completed-section__no-tasks {
        text-align: center;
        color: var(--text-muted);
        font-style: italic;
        padding: 1.5rem;
    }

    /* Mobile First - Стили для группировки по месяцам */
    .month-header {
        font-size: 1rem;
        font-weight: 600;
        color: var(--text-primary);
        margin: 0.75rem 0 0.5rem 0;
        padding: 0.5rem 0.75rem;
        background: var(--bg-secondary);
        border-radius: var(--radius-md);
        border-left: 4px solid var(--accent-color);
        line-height: 1.3;
    }

    .month-tasks-container {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-bottom: 0.75rem;
    }

    /* Стили для выполненных задач */
    .task-item--completed {
        opacity: 0.7;
        background: var(--bg-secondary);
    }

    .task-item--completed .task-item__text {
        text-decoration: line-through;
        color: var(--text-secondary);
    }

    .task-item__checkbox--completed .task-item__checkmark {
        background: var(--accent-color);
        border-color: var(--accent-color);
        color: white;
    }

    .task-item__checkbox .task-item__checkmark {
        border-color: var(--border-color);
    }

    /* Mobile First - Кнопка удаления */
    .task-item__delete-btn {
        position: relative;
        width: var(--touch-target);
        height: var(--touch-target);
        background: none;
        border: none;
        cursor: pointer;
        padding: 0;
        color: var(--text-muted);
        border-radius: var(--radius-sm);
        -webkit-tap-highlight-color: transparent;
        flex-shrink: 0;
    }

    .task-item__delete-btn::before {
        content: '';
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        width: 20px;
        height: 20px;
        background-image: url('/images/trash-icon.svg');
        background-size: contain;
        background-repeat: no-repeat;
        background-position: center;
    }

    .task-item__delete-btn:hover {
        color: var(--danger-color);
        background: var(--bg-secondary);
        transform: scale(1.1);
    }

    .task-item__delete-btn:hover::before {
        filter: brightness(1.2);
    }

    .task-item__delete-btn:active {
        transform: scale(0.95);
    }

    /* Планшеты */
    @media (min-width: 768px) {
        .completed-section {
            padding: 1.5rem;
        }

        .completed-section__title {
            font-size: 1.5rem;
            margin-bottom: 1.5rem;
        }

        .completed-section__list {
            gap: 1.5rem;
        }

        .month-header {
            font-size: 1.125rem;
            margin: 1rem 0 0.75rem 0;
            padding: 0.5rem 1rem;
        }

        .month-tasks-container {
            margin-bottom: 1rem;
        }

        .task-item__delete-btn {
            width: 20px;
            height: 20px;
        }
    }

    /* Десктопы */
    @media (min-width: 1024px) {
        .completed-section {
            padding: 2rem;
        }
    }


</style>
